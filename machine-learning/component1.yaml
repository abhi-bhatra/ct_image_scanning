name: Preprocess csv
inputs:
- {name: file, type: Tarball}
outputs:
- {name: output_csv, type: CSV}
implementation:
  container:
    image: python:3.7
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'pandas' 'scikit-image' 'numpy' 'glob2' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3
      -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-image' 'numpy'
      'glob2' --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def _make_parent_dirs_and_return_path(file_path: str):
          import os
          os.makedirs(os.path.dirname(file_path), exist_ok=True)
          return file_path

      def preprocess_csv(file_path,
                         output_csv):
          import os
          import pandas as pd
          import tarfile
          import os
          from glob import glob
          import numpy as np
          from skimage.io import imread
          import re

          tarfile.open(name=file_path, mode="r|gz").extractall('data')
          PATH = 'data/archive/'
          df = pd.read_csv(os.path.join(PATH, "overview.csv"), index_col=0)
          df['Contrast'] = df['Contrast'].map(lambda x: 1 if x else 0)

          all_images_list = glob(os.path.join(PATH, 'tiff_images', '*.tif'))
          np.expand_dims(imread(all_images_list[0])[::4, ::4], 0).shape
          def jimread(x): return np.expand_dims(imread(x)[::2, ::2], 0)
          check_contrast = re.compile(
              r'/tiff_images/ID_([\d]+)_AGE_[\d]+_CONTRAST_([\d]+)_CT.tif')
          label = []
          id_list = []
          for image in all_images_list:
              id_list.append(check_contrast.findall(image)[0][0])
              label.append(check_contrast.findall(image)[0][1])

          label_list = pd.DataFrame(label, id_list)
          images = np.stack([jimread(i) for i in all_images_list], 0)

          df.to_csv(output_csv, index=False, header=False)

      import argparse
      _parser = argparse.ArgumentParser(prog='Preprocess csv', description='')
      _parser.add_argument("--file", dest="file_path", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--output-csv", dest="output_csv", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parsed_args = vars(_parser.parse_args())

      _outputs = preprocess_csv(**_parsed_args)
    args:
    - --file
    - {inputPath: file}
    - --output-csv
    - {outputPath: output_csv}
